package ${package.Service};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.IService;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#if(${package.ModuleName})
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.modules.${package.ModuleName}.dto.${entity}DTO;
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.modules.${package.ModuleName}.vo.${entity}Vo;
    #if(${cfg.isTreeTable})
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.modules.${package.ModuleName}.vo.${entity}TreeVo;
    #end
#else
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.dto.${entity}DTO;
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.vo.${entity}Vo;
    #if(${cfg.isTreeTable})
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.vo.${entity}TreeVo;
    #end
#end
import ${package.Entity}.${entity};
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.common.bean.PageData;
import ${cfg.parentGroupId}.${cfg.parentArtifactId}.common.bean.PageParam;
import java.util.List;

/**
 * @Classname ${table.serviceName}
 * @Description $!{table.comment} Service
 * @Author ${author}
 * @Date ${date}
 * @Version 1.0
 */
public interface ${table.serviceName} extends IService<${entity}> {

    void create(${entity}DTO ${table.entityPath}DTO);

    void update(${entity}DTO ${table.entityPath}DTO);

#if(${cfg.excelCodeGenerate})
    void importData(List<${entity}DTO> dataList, Boolean isCovered);
#end
#foreach($field in ${table.fields})
    #if(${field.keyFlag}) ##主键字段

    void deleteById(${field.propertyType} id);

    void deleteByIds(List<${field.propertyType}> idList);

    ${entity}Vo get${entity}ById(${field.propertyType} id);

    #end
#end
    void delete(QueryWrapper<${entity}> queryWrapper);

    void deleteAll();

    List<${entity}Vo> getList(QueryWrapper<${entity}> queryWrapper);

    PageData<${entity}Vo> pageList(Page<${entity}> page, QueryWrapper<${entity}> queryWrapper);

    PageData<${entity}Vo> pageList(PageParam pageParam, QueryWrapper<${entity}> queryWrapper);
    #if(${cfg.isTreeTable})

    /**
    * 根据ID获取信息以及子节点列表
    * @param id
    * @return
    */
    List<${entity}TreeVo> getSubNodeListById(Long id);

    /**
     * 根据ID获取父节点列表
     * @param id
     * @return
     */
    List<${entity}TreeVo> getParentNodeTreeListById(Long id);

    /**
     * 根据ID获取树
     * @param id
     * @return
     */
    ${entity}TreeVo getTreeById(Long id);

    List<${entity}TreeVo> getTreeVoList(QueryWrapper<${entity}> queryWrapper);
    #end
}
